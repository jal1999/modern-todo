import { isValidEmailDomain } from "../src/util/email/generate";
import { describe, test, expect } from "@jest/globals";
import { MONGO_URI } from "../src/util/secrets";
import { connectToDb } from "../src/util/mongooseConnector";
import mongoose from "mongoose";
import { generateToken, validateToken } from "../src/util/token";
import { Jwt, JwtPayload } from "jsonwebtoken";
import { TokenPayload } from "google-auth-library";

describe("MongoDB Connection", () => {
    test("Connects to the database with the proper URI", async () => {
        const readyState: number = (await connectToDb(MONGO_URI)).connections[0].readyState;
        expect(readyState).toBe(1);
        await mongoose.connection.close();
    });

    test("Throws an error when trying to connect with the incorrect URI", async () => {
        expect(typeof (await connectToDb("hello"))).not.toBe(typeof import("mongoose"));
    });
});

describe("Email Validity", () => {
    test("Determines dslkaj is not a valid email domain", () => {
        expect(isValidEmailDomain("dslkaj.net")).toBeFalsy();
    });

    test("Determines googl is not a valid email domain", () => {
        expect(isValidEmailDomain("googl.com")).toBeFalsy();
    });

    test("Determines gmail is a valid email domain", () => {
        expect(isValidEmailDomain("gmail.com")).toBeTruthy();
    });
});

describe("JWT Generation", () => {
    test("Generates a JWT", async () => {
        let wasSuccessful: boolean;
        try {
            const token: string = await generateToken("joe@bob.com");
            wasSuccessful = true;
        } catch (err: any) {
            wasSuccessful = false;
        } finally {
            expect(wasSuccessful).toBeTruthy();
        }
    });
});

describe("JWT Validation", () => {
    test("Validate a JWT generated by the application", async () => {
        // internal
        let jwtPayload: JwtPayload | TokenPayload | string;
        try {
            const token: string = await generateToken("joe@bob.com");
            jwtPayload = await validateToken(token, "todo");
        } catch (err: any) {
        } finally {
            expect((jwtPayload as JwtPayload).email).toBe("joe@bob.com");
        }
    });

    // test("Validate a JWT generated by Google", () => {
        // 
    // })
});